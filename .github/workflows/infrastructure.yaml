name: "Terraform 103 - Pipeline" 

on:
 push:
   branches:
   - main

 # Allows you to run this workflow manually from the Actions tab
 workflow_dispatch:

env:
 TF_VERSION: '1.8.2'

jobs:
 terraform-dev:
   name: "Terraform - plan and apply - DEV"
   runs-on: ubuntu-latest
   environment: DEV
   env:
      AWS_ACCESS_KEY_ID: "${{ secrets.AWS_ACCESS_KEY_ID }}"
      AWS_SECRET_ACCESS_KEY: "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
   defaults:
     run:
       shell: bash
 
   steps:
     - name: Checkout the repository
       uses: actions/checkout@v2
 
     - name: Setup Terraform with specified version
       uses: hashicorp/setup-terraform@v3
       with:
         terraform_version: $TF_VERSION
         terraform_wrapper: true
  
     - name: Terraform init
       id: init
       run: terraform init -backend-config="bucket=terraform-102-state" -backend-config="key=dev.tfstate" 

     - name: Terraform format
       id: fmt
       run: terraform fmt -check
    
     - name: Terraform validate
       id: validate
       run: terraform validate 

     - name: Terraform plan
       id: plan       
       if: github.event_name == 'pull_request'
       run: terraform plan -no-color -input=false -var-file=variables/dev.json
       continue-on-error: true    

     - uses: actions/github-script@v7
       if: github.event_name == 'pull_request'
       env:
         PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
       with:
         script: |
           const output = `#### Terraform Format: \`${{ steps.fmt.outcome }}\`           
           #### Terraform Validate \`${{ steps.validate.outcome }}\` 

           <details><summary>Show Plan</summary>

            \`\`\`\n
           ${process.env.PLAN}
           \`\`\` 

           </details>

           *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

           github.rest.issues.createComment({
             issue_number: context.issue.number,
             owner: context.repo.owner,
             repo: context.repo.repo,
             body: output
           })

     - name: Terraform Plan Status
       if: steps.plan.outcome == 'failure'
       run: exit 1 

     - name: Terraform Apply
       if: github.ref == 'refs/heads/terraform-103' && github.event_name == 'push'
       run: terraform apply -auto-approve -input=false -var-file="variables/dev.json"

 terraform-plan-prod:
  name: 'Terraform Plan - PROD'
  needs: [terraform-dev]
  runs-on: ubuntu-latest
  environment: PROD
  env:
    AWS_ACCESS_KEY_ID: "${{ secrets.AWS_ACCESS_KEY_ID }}"
    AWS_SECRET_ACCESS_KEY: "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
  defaults:
    run:
      shell: bash
  outputs:
    tfplanExitCode: ${{ steps.tf-plan.outputs.exitcode }}

  steps:    
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: $TF_VERSION
        terraform_wrapper: true
    
    - name: Terraform init
      id: init
      run: terraform init -backend-config="bucket=terraform-102-state" -backend-config="key=prod.tfstate" 

    - name: Terraform Plan
      id: tf-plan
      run: |
        export exitcode=0
        terraform plan -var-file=variables/prod.json -detailed-exitcode -no-color -out tfplan-prod || export exitcode=$?

        echo "exitcode=$exitcode" >> $GITHUB_OUTPUT
        
        if [ $exitcode -eq 1 ]; then
          echo Terraform Plan Failed!
          exit 1
        else 
          exit 0
        fi
        
    # Save plan to artifacts  
    - name: Publish Terraform Plan
      uses: actions/upload-artifact@v4
      with:
        name: tfplan-prod
        path: tfplan-prod
        
    # Create string output of Terraform Plan
    - name: Create String Output
      id: tf-plan-string
      run: |
        TERRAFORM_PLAN=$(terraform show -no-color tfplan-prod)
        
        delimiter="$(openssl rand -hex 8)"
        echo "summary<<${delimiter}" >> $GITHUB_OUTPUT
        echo "## Terraform Plan Output" >> $GITHUB_OUTPUT
        echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo '```terraform' >> $GITHUB_OUTPUT
        echo "$TERRAFORM_PLAN" >> $GITHUB_OUTPUT
        echo '```' >> $GITHUB_OUTPUT
        echo "</details>" >> $GITHUB_OUTPUT
        echo "${delimiter}" >> $GITHUB_OUTPUT
        
    # Publish Terraform Plan as task summary
    - name: Publish Terraform Plan to Task Summary
      env:
        SUMMARY: ${{ steps.tf-plan-string.outputs.summary }}
      run: |
        echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY
                
 terraform-apply-prod:
   name: 'Terraform Apply - PROD'
   if: github.ref == 'refs/heads/terraform-103' && needs.terraform-plan-prod.outputs.tfplanExitCode == 2
   runs-on: ubuntu-latest
   environment: PROD
   env:
    AWS_ACCESS_KEY_ID: "${{ secrets.AWS_ACCESS_KEY_ID }}"
    AWS_SECRET_ACCESS_KEY: "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
   defaults:
     run:
       shell: bash
   needs: [terraform-plan-prod]
    
   steps:
   - name: Checkout
     uses: actions/checkout@v4
   
   - name: Setup Terraform with specified version
     uses: hashicorp/setup-terraform@v3
     with:
       terraform_version: $TF_VERSION
       terraform_wrapper: true
  
   - name: Terraform init
     id: init
     run: terraform init -backend-config="bucket=terraform-102-state" -backend-config="key=prod.tfstate" 

   - name: Download Terraform Plan
     uses: actions/download-artifact@v4
     with:
       name: tfplan-prod

   - name: Terraform Apply
     run: terraform apply -auto-approve tfplan-prod
